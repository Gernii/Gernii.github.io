{"version":3,"sources":["Handler/GetMDFile.jsx","assets/markdown/MarkDown.js","assets/markdown/nlu.md","assets/markdown/speech.md","assets/markdown/convai.md","MarkMapView/ShowMarkMap.jsx","GUI/GUIViewer.jsx","GUI/GUIView/RadioInput.jsx","GUI/GUIButton/ShowAndHideBth.jsx","index.js"],"names":["GetMDFile","useState","data","setData","getData","a","promise","markmap","map","markmapp","fetch","fileSource","then","res","text","Promise","all","useEffect","id","name","ShowMarkMap","markDown","option","window","innerWidth","ref","useRef","current","innerHTML","root","Transformer","transform","Markmap","create","GUIViewer","checked","onChange","className","value","label","setter","RadioInput","type","ShowAndHideBtn","htmlFor","Root","setChecked","autoFit","ReactDOM","render","document","getElementById"],"mappings":"0PAqBeA,EAnBG,WAAO,IAAD,EACCC,mBAAS,IADV,mBACfC,EADe,KACVC,EADU,KAGhBC,EAAO,uCAAG,4BAAAC,EAAA,6DACVC,EAAUC,EAAQC,KAAI,SAAAC,GAAQ,OAChCC,MAAMD,EAASE,YAChBC,MAAK,SAACC,GAAD,OAASA,EAAIC,aAHL,KAIdX,EAJc,SAIAY,QAAQC,IAAIV,GAJZ,6EAAH,qDAab,OANAW,qBAAU,WAERb,MAEC,IAEIF,GCfIK,EAAU,CACnB,CACIW,GAAI,EACJC,KAAM,MACNR,WCPO,IAA0B,gCDSrC,CACIO,GAAI,EACJC,KAAM,SACNR,WEZO,IAA0B,mCFcrC,CACIO,GAAI,EACJC,KAAM,SACNR,WGjBO,IAA0B,oC,uBCiB1BS,MAdf,YAAyC,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,OAC1BC,OAAOC,YAAc,MACvBF,EAAS,MAEX,IAAMG,EAAMC,iBAAO,MAOnB,OANAT,qBAAU,WACNQ,EAAIE,QAAQC,UAAY,GACxB,IACQC,GADY,IAAIC,eACIC,UAAUV,GAA9BQ,KACRG,IAAQC,OAAO,WAAYX,EAAQO,KACpC,CAACR,EAAUC,IACP,qBAAKG,IAAKA,EAAKP,GAAM,UAArB,gBCMMgB,EAlBG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAC3B,OACE,qCACE,cAAC,EAAD,IACA,sBAAKC,UAAU,UAAf,UACE,2CACA,oBAAIA,UAAU,UAAd,SAEE9B,EAAQC,KAAI,SAAA8B,GACV,OAAO,cAAC,EAAD,CAAYC,MAAOD,EAAMnB,KAAMmB,MAAOA,EAAMpB,GAAqBiB,QAASA,EAASK,OAAQJ,GAApCE,EAAMpB,gBCMjEuB,EAjBI,SAAC,GAAqC,IAApCF,EAAmC,EAAnCA,MAAOD,EAA4B,EAA5BA,MAAOH,EAAqB,EAArBA,QAASK,EAAY,EAAZA,OAC3C,OACC,6BACC,kCACE,uBACAtB,GAAG,QACJwB,KAAK,QACLJ,MAAQ,QACRH,QAAUA,IAAYG,EACnBF,SAAU,kBAAMI,EAAOF,MAEzB,sBAAMD,UAAWF,IAAYG,EAAO,gBAAiB,QAArD,SAA+DC,U,QCGrDI,EAbQ,WACrB,OACI,qCACE,uBAAOD,KAAK,WAAWxB,GAAG,UAC1B,wBAAO0B,QAAQ,QAAf,UACE,cAAC,IAAD,CAAgBP,UAAU,gBAAgBnB,GAAG,SAC7C,cAAC,IAAD,CAAQmB,UAAU,UAAUnB,GAAG,eCHzC,SAAS2B,IAAQ,IAAD,EACkB5C,mBAAS,GAD3B,mBACLkC,EADK,KACIW,EADJ,KAENzB,EAAWrB,IACjB,OACI,gCACE,cAAC,EAAD,CAAWmC,QAASA,EAASC,SAAUU,IACvC,cAAC,EAAD,CAAazB,SAAUA,EAASc,GAAUb,OAAQ,CAACyB,SAAS,QAKtEC,IAASC,OAAO,cAACJ,EAAD,IAASK,SAASC,eAAe,W","file":"static/js/main.d0154994.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {markmap} from '../assets/FunctionStorage';\r\nconst GetMDFile = () => {\r\n  const [data,setData] = useState([])\r\n  \r\n  const getData = async () => {\r\n    let promise = markmap.map(markmapp => \r\n      fetch(markmapp.fileSource)\r\n    .then((res) => res.text()))\r\n    setData(await Promise.all(promise))\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    getData()\r\n    \r\n  }, [])\r\n  // console.log(data2);\r\n  return data\r\n}\r\n\r\nexport default GetMDFile\r\n","import nlu from './nlu.md'\r\nimport speech from './speech.md'\r\nimport convai from './convai.md'\r\nexport const markmap = [\r\n    {\r\n        id: 0,\r\n        name: 'NLU',\r\n        fileSource: nlu,\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'Speech',\r\n        fileSource: speech,\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Convai',\r\n        fileSource: convai,\r\n    },\r\n    \r\n    \r\n]","export default __webpack_public_path__ + \"static/media/nlu.e4ed9f70.md\";","export default __webpack_public_path__ + \"static/media/speech.f9f9b1df.md\";","export default __webpack_public_path__ + \"static/media/convai.31d6cfe0.md\";","import { useEffect, useRef } from \"react\"\r\nimport {Transformer} from 'markmap-lib'\r\nimport {Markmap} from 'markmap-view'\r\nfunction ShowMarkMap({markDown, option}){\r\n  if (window.innerWidth <= 480){\r\n    option = null\r\n  }\r\n  const ref = useRef(null);\r\n  useEffect(() => {\r\n      ref.current.innerHTML = \"\";\r\n      const transformer = new Transformer()\r\n      const { root} = transformer.transform(markDown)\r\n      Markmap.create('#mindmap', option, root)\r\n  }, [markDown, option])\r\n  return <svg ref={ref} id = {\"mindmap\"}> </svg>\r\n}\r\n\r\nexport default ShowMarkMap","import {RadioInput, ShowAndHideBtn, markmap} from \"../assets/FunctionStorage\"\r\n\r\nconst GUIViewer = ({checked, onChange}) => {\r\n  return (\r\n    <>\r\n      <ShowAndHideBtn />\r\n      <div className='sidebar'>\r\n        <header>MODEL</header>\r\n        <ul className='submenu'>\r\n        {\r\n          markmap.map(value => {\r\n            return <RadioInput label={value.name} value={value.id} key = {value.id} checked={checked} setter={onChange}/>\r\n          })\r\n        }\r\n        </ul>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GUIViewer","const RadioInput = ({label, value, checked, setter}) => {\r\n\treturn (\r\n\t\t<li>\r\n\t  <label>\r\n\t    <input \r\n\t\t\t \tid='check'\r\n\t\t\t\ttype='radio' \r\n\t\t\t\tvalue = 'value'\r\n\t\t\t\tchecked= {checked === value}\r\n\t      onChange={() => setter(value)} \r\n\t\t\t/>\r\n\t    <span className={checked === value? 'checked value': 'value'}>{label}</span>\r\n\t  </label>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default RadioInput","import {BiMenu, BiChevronLeft} from 'react-icons/bi'\r\nconst ShowAndHideBtn = () => {\r\n  return (\r\n      <>\r\n        <input type=\"checkbox\" id=\"check\" />\r\n        <label htmlFor='check'>\r\n          <BiChevronLeft  className='bx-arrow-back' id='back'  />\r\n          <BiMenu className='bx-menu' id='btn' />\r\n        </label>\r\n\r\n      </>\r\n  )\r\n}\r\n\r\nexport default ShowAndHideBtn\r\n","import { useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {ShowMarkMap, GUIViewer, GetMDFile } from './assets/FunctionStorage';\nfunction Root() {\n    const [checked, setChecked] = useState(0)\n    const markDown = GetMDFile()\n    return (\n        <div>\n          <GUIViewer checked={checked} onChange={setChecked} />\n          <ShowMarkMap markDown={markDown[checked]} option={{autoFit: true}}/>\n        </div>\n    );\n}\n\nReactDOM.render(<Root/>, document.getElementById('root'));"],"sourceRoot":""}